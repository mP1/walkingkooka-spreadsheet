(* color ..............................................................................................................*)
COLOR                         = BRACKET_OPEN,
                                ( COLOR_AND_NUMBER | COLOR_NAME ),
                                [ WHITESPACE ],
                                BRACKET_CLOSE;



(* condition ..........................................................................................................*)
CONDITION                     = CONDITION_EQUAL |
                                CONDITION_GREATER_THAN_EQUAL |
                                CONDITION_GREATER_THAN |
                                CONDITION_LESS_THAN_EQUAL |
                                CONDITION_LESS_THAN |
                                CONDITION_NOT_EQUAL;

CONDITION_EQUAL               = BRACKET_OPEN,
                                [ WHITESPACE ],
                                EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;
                                
CONDITION_GREATER_THAN        = BRACKET_OPEN,
                                [ WHITESPACE ],
                                GREATER_THAN,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION_GREATER_THAN_EQUAL  = BRACKET_OPEN,
                                [ WHITESPACE ],
                                GREATER_THAN_EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;
                                
CONDITION_LESS_THAN           = BRACKET_OPEN,
                                [ WHITESPACE ],
                                LESS_THAN,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION_LESS_THAN_EQUAL     = BRACKET_OPEN,
                                [ WHITESPACE ],
                                LESS_THAN_EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;
                                    
CONDITION_NOT_EQUAL           = BRACKET_OPEN,
                                [ WHITESPACE ],
                                NOT_EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;



(* date ..............................................................................................................*)
DATE_FORMAT                   = [ CONDITION ], [ GENERAL_OR_DATE_COLOR ],
                                [{ PATTERN_SEPARATOR, [ CONDITION ], [ GENERAL_OR_DATE_COLOR ] }],
                                [ PATTERN_SEPARATOR ];



DATE_PARSE                    = GENERAL_OR_DATE,
                                [{ PATTERN_SEPARATOR, GENERAL_OR_DATE}],
                                [ PATTERN_SEPARATOR ];



GENERAL_OR_DATE               = GENERAL | DATE;

DATE                          = [{ DATE_COMPONENT }];

GENERAL_OR_DATE_COLOR         = GENERAL | DATE_COLOR;

DATE_COLOR                    = [{ COLOR | DATE_COMPONENT }];



DATE_COMPONENT                = DAY | MONTH_MINUTE | YEAR | DATETIME_LITERAL;



(* date/time .........................................................................................................*)
DATETIME_FORMAT                = [ CONDITION ], [ GENERAL_OR_DATETIME_COLOR ],
                                [{ PATTERN_SEPARATOR, [ CONDITION ], [ GENERAL_OR_DATETIME_COLOR ] }],
                                [ PATTERN_SEPARATOR ];



DATETIME_PARSE                = GENERAL_OR_DATETIME,
                                [{ PATTERN_SEPARATOR, GENERAL_OR_DATETIME}],
                                [ PATTERN_SEPARATOR ];



GENERAL_OR_DATETIME           = GENERAL | DATETIME;

DATETIME                      = [{ DATETIME_COMPONENT }];

GENERAL_OR_DATETIME_COLOR     = GENERAL | DATETIME_COLOR;

DATETIME_COLOR                = [{ COLOR | DATETIME_COMPONENT }];



DATETIME_COMPONENT            = DAY | MONTH_MINUTE | YEAR | HOUR | SECOND_MILLIS | AM_SLASH_PM | A_SLASH_P | DATETIME_LITERAL;



(* time ..............................................................................................................*)
TIME_FORMAT                   = [ CONDITION ], [ GENERAL_OR_TIME_COLOR ],
                                [{ PATTERN_SEPARATOR, [ CONDITION ], [ GENERAL_OR_TIME_COLOR ] }],
                                [ PATTERN_SEPARATOR ];



TIME_PARSE                    = GENERAL_OR_TIME,
                                [{ PATTERN_SEPARATOR, GENERAL_OR_TIME}],
                                [ PATTERN_SEPARATOR ];



GENERAL_OR_TIME_COLOR         = GENERAL | TIME_COLOR;

TIME_COLOR                    = [{ COLOR | TIME_COMPONENT }];

GENERAL_OR_TIME               = GENERAL | TIME;

TIME                          = [{ TIME_COMPONENT }];



TIME_COMPONENT                = HOUR | MONTH_MINUTE | SECOND_MILLIS | AM_SLASH_PM | A_SLASH_P | DATETIME_LITERAL;



(* date, datetime, time ..............................................................................................*)
DATETIME_LITERAL              = ESCAPE | DATETIME_TEXT_LITERAL | QUOTED;



(* seconds decimal zeroes.............................................................................................*)
SECOND_MILLIS                 = SECOND,
                                [ DECIMAL_POINT, [{DIGIT_ZERO}]];




(* fractions .........................................................................................................*)
FRACTION                      = FRACTION_COMPONENT,
                                FRACTION_SYMBOL,
                                FRACTION_COMPONENT;

FRACTION_COMPONENT            = [{ FRACTION_OR_LITERAL }],
                                FRACTION_DIGIT,
                                [{ FRACTION_DIGIT | FRACTION_OR_LITERAL }];
FRACTION_OR_LITERAL           = COLOR | CONDITION | CURRENCY | ESCAPE | NUMBER_LITERAL | PERCENTAGE | QUOTED;
FRACTION_DIGIT                = DIGIT | DIGIT_SPACE | DIGIT_ZERO | THOUSANDS;



(* general ...........................................................................................................*)
GENERAL                       = [{ GENERAL_COLOR_WHITESPACE }],
                                GENERAL_SYMBOL,
                                [{ GENERAL_COLOR_WHITESPACE }];

GENERAL_COLOR_WHITESPACE      = WHITESPACE | COLOR;



(* NUMBER .............................................................................................................*)
NUMBER_FORMAT                     = PATTERN_SEPARATOR_3 | NUMBER_FORMAT2;

NUMBER_FORMAT2                    = [ CONDITION_GENERAL_OR_NUMBER_COLOR ],
                                    [ PATTERN_SEPARATOR, CONDITION_GENERAL_OR_NUMBER_COLOR ],
                                    [ PATTERN_SEPARATOR, CONDITION_GENERAL_OR_NUMBER_COLOR ],
                                    [ PATTERN_SEPARATOR, [ TEXT ]],
                                    [ PATTERN_SEPARATOR ];

PATTERN_SEPARATOR_3               = PATTERN_SEPARATOR, PATTERN_SEPARATOR, PATTERN_SEPARATOR;

CONDITION_GENERAL_OR_NUMBER_COLOR = [ CONDITION ], [ GENERAL_OR_NUMBER_COLOR ];



GENERAL_OR_NUMBER_OR_TEXT_COLOR = GENERAL_OR_NUMBER_COLOR | TEXT;

GENERAL_OR_NUMBER_COLOR         = GENERAL |
                                  NUMBER_COLOR;

NUMBER_COLOR                    = { COLOR | NUMBER_COMPONENT | NUMBER_EXPONENT_COLOR };

NUMBER_EXPONENT_COLOR           = NUMBER_EXPONENT_SYMBOL,
                                  [{ DECIMAL_POINT | NUMBER_DIGIT | NUMBER_COMPONENT | COLOR }];



NUMBER_PARSE                    = GENERAL_OR_NUMBER,
                                  [{ PATTERN_SEPARATOR, GENERAL_OR_NUMBER}],
                                  [ PATTERN_SEPARATOR ];

GENERAL_OR_NUMBER               = GENERAL |
                                  NUMBER;

NUMBER                          = { NUMBER_COMPONENT | NUMBER_EXPONENT };

NUMBER_COMPONENT                = CURRENCY | DECIMAL_POINT | ESCAPE | NUMBER_DIGIT | NUMBER_LITERAL | PERCENTAGE | QUOTED;

NUMBER_EXPONENT                 = NUMBER_EXPONENT_SYMBOL,
                                  [{ DECIMAL_POINT | NUMBER_DIGIT | NUMBER_COMPONENT }];

NUMBER_EXPONENT_SYMBOL          = ( 'E+' | 'e+' | 'E-' | 'e-' );

NUMBER_DIGIT                    = DIGIT | DIGIT_SPACE | DIGIT_ZERO | THOUSANDS;



(* text format, note the last pattern may not have a condition........................................................*)
TEXT_FORMAT                   = [{ CONDITION, TEXT, PATTERN_SEPARATOR }],
                                [ TEXT ],
                                [ PATTERN_SEPARATOR ];



(* text without color/condition used in parse patterns, some magic placeholder tokens are not valid like STAR.........*)
TEXT_PARSE                    = TEXT_CHARACTER | ESCAPE | QUOTED | UNDERSCORE;



(* text WITH color but NO condition used by the last format patterns..................................................*)
TEXT                           = TEXT_COLOR_WITH_STAR | TEXT_COLOR_WITHOUT_STAR;



(* text common........................................................................................................*)
TEXT_COLOR_WITH_STAR           = [{ TEXT_COLOR_COMPONENT }],
                                 STAR,
                                 [{ TEXT_COLOR_COMPONENT }];

TEXT_COLOR_WITHOUT_STAR        = [{ TEXT_COLOR_COMPONENT }];

TEXT_COLOR_COMPONENT           = COLOR | TEXT_CHARACTER | ESCAPE | QUOTED | TEXT_PLACEHOLDER | UNDERSCORE;

TEXT_CHARACTER                 = { ' ' | '<' | '>' | '=' | '!' | '$' | '-' | '+' | '(' | ')' | '%' | '#' | '&' | '/' | ',' | ':' };
