(* color ..............................................................................................................*)
COLOR                         = BRACKET_OPEN,
                                ( COLOR_NUMBER | COLOR_NAME ),
                                [ WHITESPACE ],
                                BRACKET_CLOSE;



(* condition ..........................................................................................................*)
CONDITION_EQUAL               = BRACKET_OPEN,
                                [ WHITESPACE ],
                                EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION_GREATER_THAN        = BRACKET_OPEN,
                                [ WHITESPACE ],
                                GREATER_THAN,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION_GREATER_THAN_EQUAL  = BRACKET_OPEN,
                                [ WHITESPACE ],
                                GREATER_THAN_EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION_LESS_THAN           = BRACKET_OPEN,
                                [ WHITESPACE ],
                                LESS_THAN,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION_LESS_THAN_EQUAL     = BRACKET_OPEN,
                                [ WHITESPACE ],
                                LESS_THAN_EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION_NOT_EQUAL           = BRACKET_OPEN,
                                [ WHITESPACE ],
                                NOT_EQUALS,
                                [ WHITESPACE ],
                                CONDITION_NUMBER,
                                [ WHITESPACE ],
                                BRACKET_CLOSE;

CONDITION                     = CONDITION_EQUAL |
                                CONDITION_NOT_EQUAL |
                                CONDITION_GREATER_THAN_EQUAL |
                                CONDITION_GREATER_THAN |
                                CONDITION_LESS_THAN_EQUAL |
                                CONDITION_LESS_THAN;



(* text common........................................................................................................*)
TEXT_LITERAL                   = { ' ' | '<' | '>' | '=' | '!' | '$' | '-' | '+' | '(' | ')' | '%' | '&' | '/' | ',' | ':' };

TEXT_COLOR_WITH_STAR           = [{ TEXT_COLOR_COMPONENT }],
                                 STAR,
                                 [{ TEXT_COLOR_COMPONENT }];

TEXT_COLOR_WITHOUT_STAR        = { TEXT_COLOR_COMPONENT };

TEXT_COLOR_COMPONENT           = COLOR | TEXT_LITERAL | ESCAPE | QUOTED | TEXT_PLACEHOLDER | UNDERSCORE;

(* text WITH color but NO condition used by the last format patterns..................................................*)
TEXT                           = TEXT_COLOR_WITH_STAR | TEXT_COLOR_WITHOUT_STAR;

TEXT_FORMAT                    = TEXT;



(* text without color used in parse patterns, some magic placeholder tokens are not valid like STAR...................*)
TEXT_PARSE                    = TEXT_LITERAL | ESCAPE | QUOTED | UNDERSCORE;



(* general ...........................................................................................................*)
COLOR_WHITESPACE              = WHITESPACE | COLOR;

GENERAL                       = [{ COLOR_WHITESPACE }],
                                GENERAL_SYMBOL,
                                [{ COLOR_WHITESPACE }];


(* NUMBER .............................................................................................................*)
CONDITION_GENERAL_OR_NUMBER_COLOR = [ CONDITION ], [ GENERAL_OR_NUMBER_COLOR ];

NUMBER_NUMBER_NUMBER_TEXT         = [ CONDITION_GENERAL_OR_NUMBER_COLOR ],
                                    PATTERN_SEPARATOR,
                                    [ CONDITION_GENERAL_OR_NUMBER_COLOR ],
                                    PATTERN_SEPARATOR,
                                    [ CONDITION_GENERAL_OR_NUMBER_COLOR ],
                                    PATTERN_SEPARATOR,
                                    [ CONDITION_GENERAL_OR_NUMBER_COLOR | TEXT ];


NUMBER_NUMBER_TEXT                = [ CONDITION_GENERAL_OR_NUMBER_COLOR ],
                                    PATTERN_SEPARATOR,
                                    [ CONDITION_GENERAL_OR_NUMBER_COLOR ],
                                    PATTERN_SEPARATOR,
                                    [ CONDITION_GENERAL_OR_NUMBER_COLOR | TEXT ];

NUMBER_TEXT                       = [ CONDITION_GENERAL_OR_NUMBER_COLOR ],
                                    PATTERN_SEPARATOR,
                                    [ CONDITION_GENERAL_OR_NUMBER_COLOR | TEXT ];

NUMBER_EXPONENT_SYMBOL            = 'E+' | 'e+' | 'E-' | 'e-';

NUMBER_DIGIT                      = DIGIT | DIGIT_SPACE | DIGIT_ZERO | GROUP_SEPARATOR;

NUMBER_COMPONENT                  = CURRENCY | DECIMAL_POINT | ESCAPE | NUMBER_DIGIT | NUMBER_LITERAL | PERCENTAGE | QUOTED;

NUMBER_EXPONENT                   = NUMBER_EXPONENT_SYMBOL,
                                    [{ DECIMAL_POINT | NUMBER_DIGIT | NUMBER_COMPONENT }];

NUMBER_EXPONENT_COLOR             = NUMBER_EXPONENT_SYMBOL,
                                    [{ DECIMAL_POINT | NUMBER_DIGIT | NUMBER_COMPONENT | COLOR }];

NUMBER_COLOR                      = { COLOR | NUMBER_COMPONENT | NUMBER_EXPONENT_COLOR };

NUMBER                            = { NUMBER_COMPONENT | NUMBER_EXPONENT };

GENERAL_OR_NUMBER                 = GENERAL | NUMBER;
GENERAL_OR_NUMBER_COLOR           = GENERAL | NUMBER_COLOR;

NUMBER_FORMAT                     = NUMBER_NUMBER_NUMBER_TEXT |
                                    NUMBER_NUMBER_TEXT |
                                    NUMBER_TEXT |
                                    CONDITION_GENERAL_OR_NUMBER_COLOR;

NUMBER_PARSE                      = GENERAL_OR_NUMBER,
                                    [{ PATTERN_SEPARATOR, GENERAL_OR_NUMBER}],
                                    [ PATTERN_SEPARATOR ];



(* fractions .........................................................................................................*)
FRACTION_OR_LITERAL           = COLOR | CURRENCY | ESCAPE | FRACTION_LITERAL | QUOTED;

FRACTION_DIGIT                = DIGIT | DIGIT_SPACE | DIGIT_ZERO;

FRACTION_COMPONENT            = [{ FRACTION_OR_LITERAL }],
                                FRACTION_DIGIT,
                                [{ FRACTION_DIGIT | FRACTION_OR_LITERAL }];

FRACTION                      = FRACTION_COMPONENT,
                                FRACTION_SYMBOL,
                                FRACTION_COMPONENT;



(* date, datetime, time ..............................................................................................*)
DATE_OR_DATETIME_OR_TIME_LITERAL = ESCAPE | DATETIME_TEXT_LITERAL | QUOTED;

(* seconds decimal zeroes.............................................................................................*)
SECOND_MILLIS                 = SECOND,
                                [ DECIMAL_POINT, [{DIGIT_ZERO}]];



(* date ..............................................................................................................*)

DATE_COMPONENT         = DAY | MONTH | YEAR | DATE_OR_DATETIME_OR_TIME_LITERAL;

DATE                   = { DATE_COMPONENT };

DATE_COLOR             = { COLOR | DATE_COMPONENT };

GENERAL_OR_DATE        = GENERAL | DATE;

GENERAL_OR_DATE_COLOR  = GENERAL | DATE_COLOR;

DATE_FORMAT            = [ GENERAL_OR_DATE_COLOR ];

DATE_PARSE             = GENERAL_OR_DATE,
                         [{ PATTERN_SEPARATOR, GENERAL_OR_DATE}],
                         [ PATTERN_SEPARATOR ];



(* date/time .........................................................................................................*)
DATETIME_COMPONENT        = DAY | MONTH | YEAR | HOUR | SECOND_MILLIS | AM_SLASH_PM | A_SLASH_P | DATE_OR_DATETIME_OR_TIME_LITERAL;

DATETIME                  = { DATETIME_COMPONENT };

DATETIME_COLOR            = { COLOR | DATETIME_COMPONENT };

GENERAL_OR_DATETIME       = GENERAL | DATETIME;

GENERAL_OR_DATETIME_COLOR = GENERAL | DATETIME_COLOR;

DATETIME_FORMAT           = [ GENERAL_OR_DATETIME_COLOR ];

DATETIME_PARSE            = GENERAL_OR_DATETIME,
                            [{ PATTERN_SEPARATOR, GENERAL_OR_DATETIME}],
                            [ PATTERN_SEPARATOR ];



(* time ..............................................................................................................*)

TIME_COMPONENT         = HOUR | MINUTE | SECOND_MILLIS | AM_SLASH_PM | A_SLASH_P | DATE_OR_DATETIME_OR_TIME_LITERAL;

TIME                   = { TIME_COMPONENT };

TIME_COLOR             = { COLOR | TIME_COMPONENT };

GENERAL_OR_TIME        = GENERAL | TIME;

GENERAL_OR_TIME_COLOR  = GENERAL | TIME_COLOR;

TIME_FORMAT            = [ GENERAL_OR_TIME_COLOR ];

TIME_PARSE             = GENERAL_OR_TIME,
                         [{ PATTERN_SEPARATOR, GENERAL_OR_TIME}],
                         [ PATTERN_SEPARATOR ];







