(* expressions after the equals sign *)
EXPRESSION 		                = [ WHITESPACE ], EXPRESSION_REQUIRED, [ WHITESPACE ];
EXPRESSION_OPT                  = BINARY_EXPRESSION | LAMBDA_FUNCTION | NAMED_FUNCTION | CELL_OR_CELL_RANGE_OR_LABEL | GROUP | NEGATIVE | PERCENTAGE | NUMBER | TEXT | ERROR;
EXPRESSION_REQUIRED             = EXPRESSION_OPT;


BINARY_EXPRESSION               = BINARY_SUB_EXPRESSION, {[ WHITESPACE ], BINARY_OPERATOR, [ WHITESPACE ], BINARY_SUB_EXPRESSION_REQUIRED};
BINARY_OPERATOR                 = EQUALS_SYMBOL | NOT_EQUALS_SYMBOL | GREATER_THAN_EQUALS_SYMBOL | GREATER_THAN_SYMBOL | LESS_THAN_EQUALS_SYMBOL | LESS_THAN_SYMBOL | PLUS_SYMBOL | NEGATIVE_SYMBOL | MULTIPLY_SYMBOL | DIVIDE_SYMBOL | POWER_SYMBOL | BETWEEN_SYMBOL;
BINARY_SUB_EXPRESSION           = LAMBDA_FUNCTION | NAMED_FUNCTION | CELL_OR_CELL_RANGE_OR_LABEL | GROUP | NEGATIVE | PERCENTAGE | NUMBER | TEXT | ERROR;
BINARY_SUB_EXPRESSION_REQUIRED  = BINARY_SUB_EXPRESSION;

CELL_OR_CELL_RANGE_OR_LABEL     = LABEL_NAME | CELL_RANGE | CELL;

CELL_RANGE                      = CELL, [ WHITESPACE ], BETWEEN_SYMBOL, [ WHITESPACE ], CELL;

(* function aka function( 123, 456 ) *)
NAMED_FUNCTION                  = FUNCTION_NAME, FUNCTION_PARAMETERS;

LAMBDA_FUNCTION_DEFINITION      = LAMBDA_FUNCTION_NAME, FUNCTION_PARAMETERS;

LAMBDA_FUNCTION                 = LAMBDA_FUNCTION_DEFINITION, FUNCTION_PARAMETERS;

FUNCTION_PARAMETERS             = PARENTHESIS_OPEN_SYMBOL, [ WHITESPACE ], [ FUNCTION_PARAMETER_VALUES ], [ WHITESPACE ], PARENTHESIS_CLOSE_SYMBOL;
FUNCTION_PARAMETER_VALUES       = EXPRESSION_OPT, [{FUNCTION_PARAMETER_SEPARATOR}];
FUNCTION_PARAMETER_SEPARATOR    = [ WHITESPACE ], VALUE_SEPARATOR_SYMBOL, [ WHITESPACE ], EXPRESSION_REQUIRED;

GROUP 			                = PARENTHESIS_OPEN_SYMBOL, [ WHITESPACE ], EXPRESSION_REQUIRED, [ WHITESPACE ], PARENTHESIS_CLOSE_SYMBOL;

(* NEGATIVE_EXPRESSION ... NUMBER must not have BINARY_EXPRESSION to avoid incorrect tokens. *)
NEGATIVE_EXPRESSION_REQUIRED    = LAMBDA_FUNCTION | NAMED_FUNCTION | CELL_OR_CELL_RANGE_OR_LABEL | GROUP | PERCENTAGE | NUMBER;
NEGATIVE		                = NEGATIVE_SYMBOL, [ WHITESPACE ], NEGATIVE_EXPRESSION_REQUIRED;

PERCENTAGE		                = NUMBER, PERCENT_SYMBOL;



(* apostrophe string literal *)
APOSTROPHE_STRING               = APOSTROPHE_SYMBOL, [ STRING ];



(* equals-sign then expression *)
EQUALS_EXPRESSION               = FORMULA_EQUALS_SYMBOL, EXPRESSION;



(* string literal OR expression OR date OR datetime OR number OR time *)
VALUE_OR_EXPRESSION             = APOSTROPHE_STRING | EQUALS_EXPRESSION | VALUE;
VALUE_OR_EXPRESSION_REQUIRED    = VALUE_OR_EXPRESSION;
